// <auto-generated />
using System;
using FBone.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FBone.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20250127181227_AddedauditVerificatorPositionToArea")]
    partial class AddedauditVerificatorPositionToArea
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FBone.Database.Entities.ActHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActId")
                        .HasColumnType("int");

                    b.Property<int>("ActionCode")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ActId");

                    b.HasIndex("UserId");

                    b.ToTable("ActHistory");
                });

            modelBuilder.Entity("FBone.Database.Entities.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActId")
                        .HasColumnType("int");

                    b.Property<int>("ActionOwnerPositionId")
                        .HasColumnType("int");

                    b.Property<string>("ActionTakenNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Approved1ByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("Approved2ByUserId")
                        .HasColumnType("int");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CompletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredActionNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ShiftDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.Property<string>("SupervisorNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VerifiedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActId");

                    b.HasIndex("ActionOwnerPositionId");

                    b.HasIndex("Approved1ByUserId");

                    b.HasIndex("Approved2ByUserId");

                    b.HasIndex("AreaId");

                    b.HasIndex("CompletedByUserId");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("FacilityId");

                    b.HasIndex("VerifiedByUserId");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("FBone.Database.Entities.AuditFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuditId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("File")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuditId");

                    b.ToTable("AuditFiles");
                });

            modelBuilder.Entity("FBone.Database.Entities.AuditHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionUserId")
                        .HasColumnType("int");

                    b.Property<int>("AuditId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HistoryCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActionUserId");

                    b.HasIndex("AuditId");

                    b.ToTable("AuditHistories");
                });

            modelBuilder.Entity("FBone.Database.Entities.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("FBone.Database.Entities.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmailId")
                        .IsUnique()
                        .HasDatabaseName("Index_EmailId");

                    b.ToTable("EmailTemplate");
                });

            modelBuilder.Entity("FBone.Database.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActItemId")
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AddedManually")
                        .HasColumnType("bit");

                    b.Property<string>("DataOrigin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EventDateTimeClear")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EventDateTimeSet")
                        .HasColumnType("datetime2");

                    b.Property<long>("PSSEventId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ReportIt")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ShiftDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShiftType")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActItemId")
                        .IsUnique()
                        .HasFilter("[ActItemId] IS NOT NULL");

                    b.HasIndex("TagId");

                    b.ToTable("Event", t =>
                        {
                            t.HasCheckConstraint("CK_Properties_EventSetDate_EventClearDate", "[EventDateTimeClear] > [EventDateTimeSet]");
                        });
                });

            modelBuilder.Entity("FBone.Database.Entities.NodeReferences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("Device")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Node")
                        .HasColumnType("int");

                    b.Property<string>("SRCNode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UCN")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("NodeReferences");
                });

            modelBuilder.Entity("FBone.Database.Entities.RequestLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CAI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RequestLogs");
                });

            modelBuilder.Entity("FBone.Database.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("int");

                    b.Property<string>("Equipment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Service")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tagnumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagnumberByp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isFG")
                        .HasColumnType("bit");

                    b.Property<bool>("isForBulkInsert")
                        .HasColumnType("bit");

                    b.Property<bool>("isIPL")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("DeviceId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("FBone.Database.Entities.tAct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ApprovedBy1On")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ApprovedBy2On")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ApprovedBy3On")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ApprovedBy4On")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ApprovedBy5On")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ApprovedBy6On")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ApprovedBy7On")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ApprovedByAddOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Approver1")
                        .HasColumnType("int");

                    b.Property<int>("Approver2")
                        .HasColumnType("int");

                    b.Property<int>("Approver3")
                        .HasColumnType("int");

                    b.Property<int>("Approver4")
                        .HasColumnType("int");

                    b.Property<int>("Approver5")
                        .HasColumnType("int");

                    b.Property<int>("Approver6")
                        .HasColumnType("int");

                    b.Property<int>("Approver7")
                        .HasColumnType("int");

                    b.Property<int>("ApproverAdd")
                        .HasColumnType("int");

                    b.Property<int>("ApproverPos1")
                        .HasColumnType("int");

                    b.Property<int>("ApproverPos2")
                        .HasColumnType("int");

                    b.Property<int>("ApproverPos3")
                        .HasColumnType("int");

                    b.Property<int>("ApproverPos4")
                        .HasColumnType("int");

                    b.Property<int>("ApproverPos5")
                        .HasColumnType("int");

                    b.Property<int>("ApproverPos6")
                        .HasColumnType("int");

                    b.Property<int>("ApproverPos7")
                        .HasColumnType("int");

                    b.Property<int>("ApproverPosAdd")
                        .HasColumnType("int");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("CauseEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CauseKK")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CauseRU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClosedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ClosedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Crew")
                        .HasColumnType("tinyint");

                    b.Property<bool>("Flag72h")
                        .HasColumnType("bit");

                    b.Property<string>("ImpactEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImpactKK")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImpactRU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCauseTranslated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsImpactTranslated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProtectTranslated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTranslated")
                        .HasColumnType("bit");

                    b.Property<bool>("MOCflag")
                        .HasColumnType("bit");

                    b.Property<int>("OrderColumn")
                        .HasColumnType("int");

                    b.Property<string>("OriginalLang")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("ru");

                    b.Property<string>("ProtectEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProtectKK")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProtectRU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<bool>("is1Approved")
                        .HasColumnType("bit");

                    b.Property<bool>("is2Approved")
                        .HasColumnType("bit");

                    b.Property<bool>("is3Approved")
                        .HasColumnType("bit");

                    b.Property<bool>("is4Approved")
                        .HasColumnType("bit");

                    b.Property<bool>("is5Approved")
                        .HasColumnType("bit");

                    b.Property<bool>("is6Approved")
                        .HasColumnType("bit");

                    b.Property<bool>("is7Approved")
                        .HasColumnType("bit");

                    b.Property<bool>("isAddApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("isIPL")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("ClosedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("tAct");
                });

            modelBuilder.Entity("FBone.Database.Entities.tActCause", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name_EN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_KK")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_RU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tActCause");
                });

            modelBuilder.Entity("FBone.Database.Entities.tActImpact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name_EN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_KK")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_RU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tActImpact");
                });

            modelBuilder.Entity("FBone.Database.Entities.tActItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActId")
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActId");

                    b.ToTable("tActItems");
                });

            modelBuilder.Entity("FBone.Database.Entities.tActProtect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name_EN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_KK")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_RU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tActProtect");
                });

            modelBuilder.Entity("FBone.Database.Entities.tArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Approver1_1")
                        .HasColumnType("int");

                    b.Property<int>("Approver1_2")
                        .HasColumnType("int");

                    b.Property<int>("Approver1_3")
                        .HasColumnType("int");

                    b.Property<int>("Approver1_4")
                        .HasColumnType("int");

                    b.Property<int>("Approver1_5")
                        .HasColumnType("int");

                    b.Property<int>("Approver1_6")
                        .HasColumnType("int");

                    b.Property<int>("Approver1_7")
                        .HasColumnType("int");

                    b.Property<int>("Approver2_1")
                        .HasColumnType("int");

                    b.Property<int>("Approver2_2")
                        .HasColumnType("int");

                    b.Property<int>("Approver2_3")
                        .HasColumnType("int");

                    b.Property<int>("Approver2_4")
                        .HasColumnType("int");

                    b.Property<int>("Approver2_5")
                        .HasColumnType("int");

                    b.Property<int>("Approver2_6")
                        .HasColumnType("int");

                    b.Property<int>("Approver2_7")
                        .HasColumnType("int");

                    b.Property<int>("Approver3_1")
                        .HasColumnType("int");

                    b.Property<int>("Approver3_2")
                        .HasColumnType("int");

                    b.Property<int>("Approver3_3")
                        .HasColumnType("int");

                    b.Property<int>("Approver3_4")
                        .HasColumnType("int");

                    b.Property<int>("Approver3_5")
                        .HasColumnType("int");

                    b.Property<int>("Approver3_6")
                        .HasColumnType("int");

                    b.Property<int>("Approver3_7")
                        .HasColumnType("int");

                    b.Property<int>("Approver4_1")
                        .HasColumnType("int");

                    b.Property<int>("Approver4_2")
                        .HasColumnType("int");

                    b.Property<int>("Approver4_3")
                        .HasColumnType("int");

                    b.Property<int>("Approver4_4")
                        .HasColumnType("int");

                    b.Property<int>("Approver4_5")
                        .HasColumnType("int");

                    b.Property<int>("Approver4_6")
                        .HasColumnType("int");

                    b.Property<int>("Approver4_7")
                        .HasColumnType("int");

                    b.Property<int>("Approver5_1")
                        .HasColumnType("int");

                    b.Property<int>("Approver5_2")
                        .HasColumnType("int");

                    b.Property<int>("Approver5_3")
                        .HasColumnType("int");

                    b.Property<int>("Approver5_4")
                        .HasColumnType("int");

                    b.Property<int>("Approver5_5")
                        .HasColumnType("int");

                    b.Property<int>("Approver5_6")
                        .HasColumnType("int");

                    b.Property<int>("Approver5_7")
                        .HasColumnType("int");

                    b.Property<int>("ApproverAdd")
                        .HasColumnType("int");

                    b.Property<bool>("Approvers5Disabled")
                        .HasColumnType("bit");

                    b.Property<string>("ConnectionString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEventsFromPSS")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastImportDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastRecordId")
                        .HasColumnType("int");

                    b.Property<long>("MaxId")
                        .HasColumnType("bigint");

                    b.Property<long>("MaxIdAlarm")
                        .HasColumnType("bigint");

                    b.Property<string>("Name_EN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_KK")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_RU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotifyForMocInitiate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotifyOn2oo3ActApproved")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotifyOnActCreationEmails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotifyOnBypassActApproved")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotifyOnForceActApproved")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotifyOnInactiveActApproved")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotifyOnType5ActApproved")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SQLquery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SQLqueryAlarm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShiftEngFacilityId")
                        .HasColumnType("int");

                    b.Property<string>("TagAlarmDisabled")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagAlarmDisabledYestd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagAlarmInhibited")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagAlarmInhibitedYestd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagBypasActive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagBypasDaily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagForcesActive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagForcesDaily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VerificatorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("ShiftEngFacilityId");

                    b.HasIndex("VerificatorId");

                    b.ToTable("tArea");
                });

            modelBuilder.Entity("FBone.Database.Entities.tFacility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Alarm_maxId")
                        .HasColumnType("bigint");

                    b.Property<long>("Force_maxId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagBypassTotal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagForcesTotal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranslatorEmail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tFacility");
                });

            modelBuilder.Entity("FBone.Database.Entities.tPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanCreateAct")
                        .HasColumnType("bit");

                    b.Property<bool>("CanTranslateAct")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAuditCreator")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNModeAdministrator")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNModeEditor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNModeUser")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShiftEngineer")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tPosition");
                });

            modelBuilder.Entity("FBone.Database.Entities.tUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("CAI")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name_EN")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name_KK")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name_RU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<bool>("isDefaultAreaUsed")
                        .HasColumnType("bit");

                    b.Property<string>("lang")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("PositionId");

                    b.ToTable("tUser");
                });

            modelBuilder.Entity("FBone.Models.NMode.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("InterpolatedValuesCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("SplitToShift")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("StartingHour")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("FBone.Models.NMode.Lcn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("LCNs", (string)null);
                });

            modelBuilder.Entity("FBone.Models.NMode.NMTotalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("LcnId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Tagname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("LcnId");

                    b.HasIndex("ParentId");

                    b.ToTable("NMTotalRecords", (string)null);
                });

            modelBuilder.Entity("FBone.Models.NMode.NModeChangeRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChangeRecordConfig")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("PreviousRecordConfig")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RecordId");

                    b.ToTable("NModeChangeRecords");
                });

            modelBuilder.Entity("FBone.Models.NMode.NModeCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NModeRecordId")
                        .HasColumnType("int")
                        .HasColumnName("NModeRecordId");

                    b.Property<string>("Operator")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Tagname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Value")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("NModeRecordId");

                    b.ToTable("NModeConditions", (string)null);
                });

            modelBuilder.Entity("FBone.Models.NMode.NModeRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ConditionORed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("ConditionORed")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("CountIt")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Creator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descriptor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Editor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LcnId")
                        .HasColumnType("int");

                    b.Property<bool>("NModeORed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("NModeORed")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Nmode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NMode");

                    b.Property<string>("Operator")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasDefaultValue("=");

                    b.Property<string>("Tagname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("LcnId");

                    b.ToTable("NModeRecords");
                });

            modelBuilder.Entity("FBone.Models.NMode.NModeResult", b =>
                {
                    b.Property<Guid>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("DayManual")
                        .HasColumnType("float");

                    b.Property<double>("DayNormal")
                        .HasColumnType("float");

                    b.Property<double>("DayOther")
                        .HasColumnType("float");

                    b.Property<bool>("Evaluation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<double>("NightManual")
                        .HasColumnType("float");

                    b.Property<double>("NightNormal")
                        .HasColumnType("float");

                    b.Property<double>("NightOther")
                        .HasColumnType("float");

                    b.Property<double>("NormalTotal")
                        .HasColumnType("float");

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UID");

                    b.HasIndex("RecordId");

                    b.ToTable("NModeResults");
                });

            modelBuilder.Entity("FBone.Database.Entities.ActHistory", b =>
                {
                    b.HasOne("FBone.Database.Entities.tAct", "Act")
                        .WithMany("ActHistories")
                        .HasForeignKey("ActId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FBone.Database.Entities.tUser", "User")
                        .WithMany("ActHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Act");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FBone.Database.Entities.Audit", b =>
                {
                    b.HasOne("FBone.Database.Entities.tAct", "Act")
                        .WithMany()
                        .HasForeignKey("ActId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FBone.Database.Entities.tPosition", "ActionOwnerPosition")
                        .WithMany()
                        .HasForeignKey("ActionOwnerPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FBone.Database.Entities.tUser", "Approved1ByUser")
                        .WithMany()
                        .HasForeignKey("Approved1ByUserId");

                    b.HasOne("FBone.Database.Entities.tUser", "Approved2ByUser")
                        .WithMany()
                        .HasForeignKey("Approved2ByUserId");

                    b.HasOne("FBone.Database.Entities.tArea", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FBone.Database.Entities.tUser", "CompletedByUser")
                        .WithMany()
                        .HasForeignKey("CompletedByUserId");

                    b.HasOne("FBone.Database.Entities.tUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FBone.Database.Entities.tFacility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FBone.Database.Entities.tUser", "VerifiedByUser")
                        .WithMany()
                        .HasForeignKey("VerifiedByUserId");

                    b.Navigation("Act");

                    b.Navigation("ActionOwnerPosition");

                    b.Navigation("Approved1ByUser");

                    b.Navigation("Approved2ByUser");

                    b.Navigation("Area");

                    b.Navigation("CompletedByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Facility");

                    b.Navigation("VerifiedByUser");
                });

            modelBuilder.Entity("FBone.Database.Entities.AuditFile", b =>
                {
                    b.HasOne("FBone.Database.Entities.Audit", "Audit")
                        .WithMany()
                        .HasForeignKey("AuditId");

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("FBone.Database.Entities.AuditHistory", b =>
                {
                    b.HasOne("FBone.Database.Entities.tUser", "ActionUser")
                        .WithMany()
                        .HasForeignKey("ActionUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FBone.Database.Entities.Audit", "Audit")
                        .WithMany()
                        .HasForeignKey("AuditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionUser");

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("FBone.Database.Entities.Event", b =>
                {
                    b.HasOne("FBone.Database.Entities.tActItems", "ActItem")
                        .WithOne("Event")
                        .HasForeignKey("FBone.Database.Entities.Event", "ActItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FBone.Database.Entities.Tag", "Tag")
                        .WithMany("Events")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActItem");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("FBone.Database.Entities.NodeReferences", b =>
                {
                    b.HasOne("FBone.Database.Entities.tArea", "Area")
                        .WithMany("References")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("FBone.Database.Entities.Tag", b =>
                {
                    b.HasOne("FBone.Database.Entities.tArea", "Area")
                        .WithMany("Tags")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FBone.Database.Entities.Device", "Device")
                        .WithMany("Tags")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Area");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("FBone.Database.Entities.tAct", b =>
                {
                    b.HasOne("FBone.Database.Entities.tArea", "Area")
                        .WithMany("Acts")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FBone.Database.Entities.tUser", "ClosedByUser")
                        .WithMany("ActClosers")
                        .HasForeignKey("ClosedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FBone.Database.Entities.tUser", "CreateByUser")
                        .WithMany("ActCreators")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("ClosedByUser");

                    b.Navigation("CreateByUser");
                });

            modelBuilder.Entity("FBone.Database.Entities.tActItems", b =>
                {
                    b.HasOne("FBone.Database.Entities.tAct", "Act")
                        .WithMany("ActItems")
                        .HasForeignKey("ActId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Act");
                });

            modelBuilder.Entity("FBone.Database.Entities.tArea", b =>
                {
                    b.HasOne("FBone.Database.Entities.tFacility", "Facility")
                        .WithMany("Areas")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FBone.Database.Entities.tFacility", "ShiftEngFacility")
                        .WithMany("AreasShiftEng")
                        .HasForeignKey("ShiftEngFacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FBone.Database.Entities.tPosition", "Verificator")
                        .WithMany()
                        .HasForeignKey("VerificatorId");

                    b.Navigation("Facility");

                    b.Navigation("ShiftEngFacility");

                    b.Navigation("Verificator");
                });

            modelBuilder.Entity("FBone.Database.Entities.tUser", b =>
                {
                    b.HasOne("FBone.Database.Entities.tArea", "Area")
                        .WithMany("Users")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FBone.Database.Entities.tFacility", "Facility")
                        .WithMany("Users")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FBone.Database.Entities.tPosition", "Position")
                        .WithMany("Users")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Facility");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("FBone.Models.NMode.NMTotalRecord", b =>
                {
                    b.HasOne("FBone.Models.NMode.Area", "Area")
                        .WithMany("NMTotalRecords")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NMTotalRecords_Areas");

                    b.HasOne("FBone.Models.NMode.Lcn", "Lcn")
                        .WithMany("NMTotalRecords")
                        .HasForeignKey("LcnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NMTotalRecords_LCNs");

                    b.HasOne("FBone.Models.NMode.NMTotalRecord", "Parent")
                        .WithMany("SubTotals")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_NMTotalRecords_NMTotalRecords");

                    b.Navigation("Area");

                    b.Navigation("Lcn");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("FBone.Models.NMode.NModeChangeRecord", b =>
                {
                    b.HasOne("FBone.Models.NMode.NModeRecord", "Record")
                        .WithMany("Changes")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Record");
                });

            modelBuilder.Entity("FBone.Models.NMode.NModeCondition", b =>
                {
                    b.HasOne("FBone.Models.NMode.NModeRecord", "NModeRecord")
                        .WithMany("Conditions")
                        .HasForeignKey("NModeRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Conditions_NModes");

                    b.Navigation("NModeRecord");
                });

            modelBuilder.Entity("FBone.Models.NMode.NModeRecord", b =>
                {
                    b.HasOne("FBone.Models.NMode.Area", "Area")
                        .WithMany("NModeRecords")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NModeRecords_Areas");

                    b.HasOne("FBone.Models.NMode.Lcn", "Lcn")
                        .WithMany("NModeRecords")
                        .HasForeignKey("LcnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NModeRecords_LCNs");

                    b.Navigation("Area");

                    b.Navigation("Lcn");
                });

            modelBuilder.Entity("FBone.Models.NMode.NModeResult", b =>
                {
                    b.HasOne("FBone.Models.NMode.NModeRecord", "Record")
                        .WithMany("Results")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Record");
                });

            modelBuilder.Entity("FBone.Database.Entities.Device", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("FBone.Database.Entities.Tag", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("FBone.Database.Entities.tAct", b =>
                {
                    b.Navigation("ActHistories");

                    b.Navigation("ActItems");
                });

            modelBuilder.Entity("FBone.Database.Entities.tActItems", b =>
                {
                    b.Navigation("Event");
                });

            modelBuilder.Entity("FBone.Database.Entities.tArea", b =>
                {
                    b.Navigation("Acts");

                    b.Navigation("References");

                    b.Navigation("Tags");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FBone.Database.Entities.tFacility", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("AreasShiftEng");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FBone.Database.Entities.tPosition", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FBone.Database.Entities.tUser", b =>
                {
                    b.Navigation("ActClosers");

                    b.Navigation("ActCreators");

                    b.Navigation("ActHistories");
                });

            modelBuilder.Entity("FBone.Models.NMode.Area", b =>
                {
                    b.Navigation("NMTotalRecords");

                    b.Navigation("NModeRecords");
                });

            modelBuilder.Entity("FBone.Models.NMode.Lcn", b =>
                {
                    b.Navigation("NMTotalRecords");

                    b.Navigation("NModeRecords");
                });

            modelBuilder.Entity("FBone.Models.NMode.NMTotalRecord", b =>
                {
                    b.Navigation("SubTotals");
                });

            modelBuilder.Entity("FBone.Models.NMode.NModeRecord", b =>
                {
                    b.Navigation("Changes");

                    b.Navigation("Conditions");

                    b.Navigation("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
