// <auto-generated />
using System;
using FBone.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FBone.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20220318104042_addedEmailTemplatesTable")]
    partial class addedEmailTemplatesTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FBone.Database.Entities.ActHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActId");

                    b.Property<int>("ActionCode");

                    b.Property<string>("Comment");

                    b.Property<int>("UserId");

                    b.Property<DateTime>("date");

                    b.HasKey("Id");

                    b.HasIndex("ActId");

                    b.HasIndex("UserId");

                    b.ToTable("ActHistory");
                });

            modelBuilder.Entity("FBone.Database.Entities.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("FBone.Database.Entities.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .IsRequired();

                    b.Property<string>("EmailId")
                        .IsRequired();

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("EmailTemplate");
                });

            modelBuilder.Entity("FBone.Database.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActItemId");

                    b.Property<string>("Action");

                    b.Property<bool>("AddedManually");

                    b.Property<string>("DataOrigin");

                    b.Property<DateTime?>("EventDateTimeClear");

                    b.Property<DateTime>("EventDateTimeSet");

                    b.Property<long>("PSSEventId");

                    b.Property<bool>("ReportIt");

                    b.Property<DateTime>("ShiftDate");

                    b.Property<int>("ShiftType");

                    b.Property<int>("TagId");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("ActItemId")
                        .IsUnique()
                        .HasFilter("[ActItemId] IS NOT NULL");

                    b.HasIndex("TagId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("FBone.Database.Entities.NodeReferences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId");

                    b.Property<string>("Device");

                    b.Property<int>("Node");

                    b.Property<string>("SRCNode");

                    b.Property<int>("UCN");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("NodeReferences");
                });

            modelBuilder.Entity("FBone.Database.Entities.tAct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActNotes");

                    b.Property<DateTime>("ApprovedBy1On");

                    b.Property<DateTime>("ApprovedBy2On");

                    b.Property<DateTime>("ApprovedBy3On");

                    b.Property<DateTime>("ApprovedBy3hOn");

                    b.Property<DateTime>("ApprovedBy4On");

                    b.Property<DateTime>("ApprovedBy5On");

                    b.Property<DateTime>("ApprovedBy6On");

                    b.Property<DateTime>("ApprovedBy7On");

                    b.Property<int>("Approver1");

                    b.Property<int>("Approver2");

                    b.Property<int>("Approver3");

                    b.Property<int>("Approver3h");

                    b.Property<int>("Approver4");

                    b.Property<int>("Approver5");

                    b.Property<int>("Approver6");

                    b.Property<int>("Approver7");

                    b.Property<int>("ApproverPos1");

                    b.Property<int>("ApproverPos2");

                    b.Property<int>("ApproverPos3");

                    b.Property<int>("ApproverPos3h");

                    b.Property<int>("ApproverPos4");

                    b.Property<int>("ApproverPos5");

                    b.Property<int>("ApproverPos6");

                    b.Property<int>("ApproverPos7");

                    b.Property<int>("AreaId");

                    b.Property<string>("CauseEN");

                    b.Property<string>("CauseKK");

                    b.Property<string>("CauseRU");

                    b.Property<int?>("ClosedByUserId");

                    b.Property<DateTime>("ClosedOn");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<byte>("Crew");

                    b.Property<bool>("Flag23h");

                    b.Property<bool>("Flag24h");

                    b.Property<string>("ImpactEN");

                    b.Property<string>("ImpactKK");

                    b.Property<string>("ImpactRU");

                    b.Property<bool>("IsCauseTranslated");

                    b.Property<bool>("IsImpactTranslated");

                    b.Property<bool>("IsProtectTranslated");

                    b.Property<bool>("IsTranslated");

                    b.Property<string>("OriginalLang")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("ru");

                    b.Property<string>("ProtectEN");

                    b.Property<string>("ProtectKK");

                    b.Property<string>("ProtectRU");

                    b.Property<DateTime>("StartedOn");

                    b.Property<int>("StatusId");

                    b.Property<byte>("Type");

                    b.Property<bool>("is1Approved");

                    b.Property<bool>("is2Approved");

                    b.Property<bool>("is3Approved");

                    b.Property<bool>("is3hApproved");

                    b.Property<bool>("is4Approved");

                    b.Property<bool>("is5Approved");

                    b.Property<bool>("is6Approved");

                    b.Property<bool>("is7Approved");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("ClosedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("tAct");
                });

            modelBuilder.Entity("FBone.Database.Entities.tActCause", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name_EN")
                        .IsRequired();

                    b.Property<string>("Name_KK")
                        .IsRequired();

                    b.Property<string>("Name_RU")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("tActCause");
                });

            modelBuilder.Entity("FBone.Database.Entities.tActImpact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name_EN")
                        .IsRequired();

                    b.Property<string>("Name_KK")
                        .IsRequired();

                    b.Property<string>("Name_RU")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("tActImpact");
                });

            modelBuilder.Entity("FBone.Database.Entities.tActItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActId");

                    b.Property<string>("Action");

                    b.Property<DateTime>("ClearTime");

                    b.Property<int>("DeviceId");

                    b.Property<string>("Equipment")
                        .IsRequired();

                    b.Property<string>("Location");

                    b.Property<DateTime>("SetTime");

                    b.Property<string>("TagName")
                        .IsRequired();

                    b.Property<string>("Unit")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ActId");

                    b.ToTable("tActItems");
                });

            modelBuilder.Entity("FBone.Database.Entities.tActProtect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name_EN")
                        .IsRequired();

                    b.Property<string>("Name_KK")
                        .IsRequired();

                    b.Property<string>("Name_RU")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("tActProtect");
                });

            modelBuilder.Entity("FBone.Database.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId");

                    b.Property<string>("Device");

                    b.Property<int?>("DeviceId");

                    b.Property<string>("Equipment");

                    b.Property<string>("Service");

                    b.Property<string>("Tagnumber");

                    b.Property<string>("Type");

                    b.Property<string>("Unit");

                    b.Property<bool>("isFG");

                    b.Property<bool>("isForBulkInsert");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("DeviceId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("FBone.Database.Entities.tArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Approver1_1");

                    b.Property<int>("Approver1_2");

                    b.Property<int>("Approver1_3");

                    b.Property<int>("Approver1_4");

                    b.Property<int>("Approver1_5");

                    b.Property<int>("Approver1_6");

                    b.Property<int>("Approver1_7");

                    b.Property<int>("Approver2_1");

                    b.Property<int>("Approver2_2");

                    b.Property<int>("Approver2_3");

                    b.Property<int>("Approver2_4");

                    b.Property<int>("Approver2_5");

                    b.Property<int>("Approver2_6");

                    b.Property<int>("Approver2_7");

                    b.Property<int>("Approver3_1");

                    b.Property<int>("Approver3_2");

                    b.Property<int>("Approver3_3");

                    b.Property<int>("Approver3_4");

                    b.Property<int>("Approver3_5");

                    b.Property<int>("Approver3_6");

                    b.Property<int>("Approver3_7");

                    b.Property<int>("Approver3h");

                    b.Property<int>("Approver4_1");

                    b.Property<int>("Approver4_2");

                    b.Property<int>("Approver4_3");

                    b.Property<int>("Approver4_4");

                    b.Property<int>("Approver4_5");

                    b.Property<int>("Approver4_6");

                    b.Property<int>("Approver4_7");

                    b.Property<string>("ConnectionString");

                    b.Property<string>("EncryptedPassword");

                    b.Property<int>("FacilityId");

                    b.Property<bool>("IsEventsFromPSS");

                    b.Property<DateTime>("LastImportDate");

                    b.Property<int>("LastRecordId");

                    b.Property<string>("Name_EN")
                        .IsRequired();

                    b.Property<string>("Name_KK")
                        .IsRequired();

                    b.Property<string>("Name_RU")
                        .IsRequired();

                    b.Property<int?>("NotifyPos24H");

                    b.Property<string>("SQLquery");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("NotifyPos24H");

                    b.ToTable("tArea");
                });

            modelBuilder.Entity("FBone.Database.Entities.tFacility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Alarm_maxId");

                    b.Property<long>("Force_maxId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("tFacility");
                });

            modelBuilder.Entity("FBone.Database.Entities.tPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanCreateAct");

                    b.Property<bool>("CanTranslateAct");

                    b.Property<bool>("IsShiftEngineer");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("tPosition");
                });

            modelBuilder.Entity("FBone.Database.Entities.tUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId");

                    b.Property<string>("CAI")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<int>("FacilityId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("Name_EN")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name_KK")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name_RU")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("PositionId");

                    b.Property<string>("lang")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("PositionId");

                    b.ToTable("tUser");
                });

            modelBuilder.Entity("FBone.Database.Entities.ActHistory", b =>
                {
                    b.HasOne("FBone.Database.Entities.tAct", "Act")
                        .WithMany("ActHistories")
                        .HasForeignKey("ActId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FBone.Database.Entities.tUser", "User")
                        .WithMany("ActHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FBone.Database.Entities.Event", b =>
                {
                    b.HasOne("FBone.Database.Entities.tActItems", "ActItem")
                        .WithOne("Event")
                        .HasForeignKey("FBone.Database.Entities.Event", "ActItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FBone.Database.Entities.Tag", "Tag")
                        .WithMany("Events")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FBone.Database.Entities.NodeReferences", b =>
                {
                    b.HasOne("FBone.Database.Entities.tArea", "Area")
                        .WithMany("References")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FBone.Database.Entities.tAct", b =>
                {
                    b.HasOne("FBone.Database.Entities.tArea", "Area")
                        .WithMany("Acts")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FBone.Database.Entities.tUser", "ClosedByUser")
                        .WithMany("ActClosers")
                        .HasForeignKey("ClosedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FBone.Database.Entities.tUser", "CreateByUser")
                        .WithMany("ActCreators")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FBone.Database.Entities.tActItems", b =>
                {
                    b.HasOne("FBone.Database.Entities.tAct", "Act")
                        .WithMany("ActItems")
                        .HasForeignKey("ActId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FBone.Database.Entities.Tag", b =>
                {
                    b.HasOne("FBone.Database.Entities.tArea", "Area")
                        .WithMany("Tags")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FBone.Database.Entities.Device", "DeviceRecord")
                        .WithMany("Tags")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FBone.Database.Entities.tArea", b =>
                {
                    b.HasOne("FBone.Database.Entities.tFacility", "Facility")
                        .WithMany("Areas")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FBone.Database.Entities.tPosition", "Notifier")
                        .WithMany("NotifyAreas")
                        .HasForeignKey("NotifyPos24H")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FBone.Database.Entities.tUser", b =>
                {
                    b.HasOne("FBone.Database.Entities.tArea", "Area")
                        .WithMany("Users")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FBone.Database.Entities.tFacility", "Facility")
                        .WithMany("Users")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FBone.Database.Entities.tPosition", "Position")
                        .WithMany("Users")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
