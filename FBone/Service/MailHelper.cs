using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Mail;


namespace FBone.Service
{
    public static class MailHelper
    {
        //public static string ActRejected = @"<p style='color:red'><b>This is automated email. Please don't replay to this email...</b></p><hr>
        //    Act with #@number@ rejected by @rejecteduser@            
        //    <br>Please review comments in the act history by accessing <a href='@ActURL@'>this link</a>
        //    <hr><b>Note:</b> This email was generated by TCO FB one application, 
        //    if you are not the right person or you have questions 
        //    please contact <a href=\'mailto:autois3@tengizchevroil.com\'>support team</a>";


        //public static string ActDelegated = @"<p style='color:red'><b>This is automated email. Please don't replay to this email...</b></p><hr>            
        //    The approval of the act with #@number@ has been delegated to you by @delegatoruser@.
        //    <br>Please <a href='@ActURL@'>open act</a> and perform required action.
        //    <hr><b>Note:</b> This email was generated by TCO FB one application, 
        //    if you are not the right person or you have questions 
        //    please contact <a href=\'mailto:autois3@tengizchevroil.com\'>support team</a>";


        //public static string ActApproved = @"<p style='color:red'><b>This is automated email. Please don't replay to this email...</b></p><hr>            
        //    The approval of the act with #@number@ has been finished. Before starting working on items in act press Activate button to allow system monitor installed Forces
        //    <br><a href='@ActURL@'>Link to act</a>
        //    <hr><b>Note:</b> This email was generated by TCO FB one application, 
        //    if you are not the right person or you have questions 
        //    please contact <a href=\'mailto:autois3@tengizchevroil.com\'>support team</a>";

        //public static string ActApproved3h = @"<p style='color:red'><b>This is automated email. Please don't replay to this email...</b></p><hr>            
        //    The approval of the act with #@number@ has been finished (>3hrs). 
        //    <br><a href='@ActURL@'>Link to act</a>
        //    <hr><b>Note:</b> This email was generated by TCO FB one application, 
        //    if you are not the right person or you have questions 
        //    please contact <a href=\'mailto:autois3@tengizchevroil.com\'>support team</a>";

        //public static string ActApproval = @"<p style='color:red'><b>This is automated email. Please don't replay to this email...</b></p><hr>            
        //    The approval of the act with #@number@ has been initiated.
        //    <br>Please <a href='@ActURL@'>open act</a> and perform required action.
        //    <hr><b>Note:</b> This email was generated by TCO FB one application, 
        //    if you are not the right person or you have questions 
        //    please contact <a href=\'mailto:autois3@tengizchevroil.com\'>support team</a>";
        

        public static void SendMail(List<MailAddress> mailto, string subject, string body)
        {
            if (Config.emailEnabled)
            {
                string mailfrom = "noreply-fbone@tengizchevroil.com";
                var mailcc = new List<MailAddress> { new MailAddress(Config.SupportContactEmail) };
                if (Config.isProduction)
                    mailcc = null;

                var email = new MailMessage
                {
                    From = new MailAddress(mailfrom)
                };

                try
                {
                    //создадим сообщение...
                    AddEmailAdresses(mailto, mailcc, email);

                    email.Subject = subject;
                    email.IsBodyHtml = true;
                    email.Body = body;
                    email.BodyEncoding = System.Text.Encoding.UTF8;

                    //создадим клиента
                    var client = new SmtpClient
                    {
                        Host = Config.MailSMTPserver,
                        Port = Convert.ToInt16(Config.MailSmtpPort),
                        DeliveryMethod = SmtpDeliveryMethod.Network,
                        EnableSsl = true,
                        UseDefaultCredentials = true
                    };
                    if (Config.MailLoginName.Length != 0 && Config.MailLoginPassword.Length != 0)
                    {
                        client.UseDefaultCredentials = false;
                        client.Credentials = new NetworkCredential(Config.MailLoginName,
                            MyEncryption.DecryptString(Config.MailLoginPassword));
                    }

                    client.Send(email);
                    email.Dispose();
                    client.Dispose();
                }
                catch (SmtpException ex)
                {
                    throw new InvalidOperationException(ex.Message);
                }
            }
        }

        //private static string ChangeEmailAdresses(string body, string supportEmail, MailMessage email)
        //{
        //    body += $"<hr>\"isProduction\": \"False\": original emails were replaced to {supportEmail}<br>Original TO:&nbsp";
        //    foreach (var item in email.To)
        //    {
        //        body += item.Address + "&nbsp";
        //    }

        //    body += "<br>Original CC:&nbsp";
        //    foreach (var item in email.CC)
        //    {
        //        body += item.Address + "&nbsp";
        //    }

        //    email.To.Clear();
        //    email.To.Add(new MailAddress(supportEmail));
        //    email.CC.Clear();
        //    email.CC.Add(new MailAddress(supportEmail));
        //    return body;
        //}

        private static void AddEmailAdresses(List<MailAddress> mailto, List<MailAddress> mailcc, MailMessage email)
        {
            foreach (MailAddress item in mailto)
            {
                email.To.Add(item);
            }

            if (mailcc != null)
            {
                foreach (MailAddress item in mailcc)
                {
                    email.CC.Add(item);
                }
            }
        }
    }
}
