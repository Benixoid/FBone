@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer localizer
@inject FBone.Database.DataManager DM
@using FBone.Service;
@model FBone.Models.NMode.NMRecordListModel
@addTagHelper *, FBone

@*<!DOCTYPE html>*@
@{
    Layout = "_NModeLayout";
}

<style>
    select {
        width: 100px
    }

    input {
        width: 200px
    }

    label {
        width: 100px
    }

    .labelwide {
        width: 150px
    }

    .glyphicon {
        display: inline-block;
        padding: 0 5px;
    }

    .glyphicon-chevron-right:after {
        content: "\00BB";
    }

    .glyphicon-chevron-left:before {
        content: "\00AB";
    }

    .shade {
        background-color: aqua;
    }

    .align-to-right {
        display: flex;
        justify-content: space-between;
    }

    .right-aligned {
        align-self: flex-end;
        padding: 0px;
    }

    /*   .body-container {
                                                                                                                                                                                    max-width: 100%;
                                                                                                                                                                                } */
</style>

<h4>NMode Records</h4>

<p>
    <a asp-action="Create" class="btn btn-secondary">Create New</a>
</p>
<form method="get">
    <input type="hidden" name="SelectedDate" value=@Model.SelectedDate.ToString("yyyy-MM-dd") />
    <input type="hidden" name="Calculated" value=@Model.Calculated.ToString() />
    <input type="hidden" name="sortOrder" value=@Model.SortViewModel.Current.ToString() />
    <input type="hidden" name="page" value=@Model.Page.PageNumber />
    <input type="hidden" name="ValidateTags" value=@Model.ValidateTags.ToString() />
    <text>&nbsp;</text>

    <div class="fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix ui-corner-tl ui-corner-tr">
        <div class="align-to-right">
            <div class="left-aligned">
                <span>
                    <text>Page size</text>
                    <select name="PageSize" asp-items="Model.Page.PageSizeList" onchange="this.form.submit()"></select>
                </span>
                <text>&nbsp;</text>
                <span>
                    <text>Area</text>
                    <select name="AreaId" asp-items="Model.Areas" onchange="this.form.submit()"></select>
                </span>
                <text>&nbsp;</text>
                <span>
                    <text>@Html.DisplayNameFor(model => model.NModeRecords[0].Lcn)</text>
                    <select name="LcnId" asp-items="Model.LCNs" onchange="this.form.submit()"></select>
                </span>
            </div>
            <div>
                <div style="float:right; margin-right:0px; padding-left:10px;">
                    <page-link page-model="Model.Page" page-action="Index" page-area-id="Model.AreaId" page-lcn-id="Model.LcnId"
                               page-size="Model.Page.PageSize" page-calculated=@Model.Calculated page-search=@Model.Search selected-date=@Model.SelectedDate validate-tags=@Model.ValidateTags> </page-link>
                </div>
                <div class="right-aligned" style="float:right;">
                    <input type="search" id="search" asp-for="Search" name="Search" placeholder="Search for Tagnames" onsearch="onSearchChanged(this, this.form)" />
                    <input type="submit" value="Search" class="btn btn-primary" />
                </div>
            </div>
        </div>
    </div>
</form>

<table class="table table-light table-hover" id="nmoderecords" role="banner" aria-describedby="nmoderecords">
    <thead>
        <tr>
            <th>
                <a asp-action="Index"
                   asp-route-sortOrder="@(Model.SortViewModel.TagnameSort)"
                   asp-route-Calculated="@(Model.Calculated)"
                   asp-route-SelectedDate="@(Model.SelectedDate.ToString("yyyy-MM-dd"))"
                   asp-route-page="@(Model.Page.PageNumber)"
                   asp-route-AreaId="@(Model.AreaId)"
                   asp-route-LcnId="@(Model.LcnId)"
                   asp-route-Search="@(Model.Search)"
                   asp-route-ValidateTags="@Model.ValidateTags">
                    Tagname
                </a>
            </th>
            <th>
                <a asp-action="Index"
                   asp-route-sortOrder="@(Model.SortViewModel.AreaSort)"
                   asp-route-Calculated="@(Model.Calculated)"
                   asp-route-SelectedDate="@(Model.SelectedDate.ToString("yyyy-MM-dd"))"
                   asp-route-page="@(Model.Page.PageNumber)"
                   asp-route-AreaId="@(Model.AreaId)"
                   asp-route-LcnId="@(Model.LcnId)"
                   asp-route-Search="@(Model.Search)"
                   asp-route-ValidateTags="@Model.ValidateTags">
                    Area
                </a>
            </th>
            <th>
                <a asp-action="Index"
                   asp-route-sortOrder="@(Model.SortViewModel.LcnSort)"
                   asp-route-Calculated="@(Model.Calculated)"
                   asp-route-SelectedDate="@(Model.SelectedDate.ToString("yyyy-MM-dd"))"
                   asp-route-page="@(Model.Page.PageNumber)"
                   asp-route-AreaId="@(Model.AreaId)"
                   asp-route-LcnId="@(Model.LcnId)"
                   asp-route-Search="@(Model.Search)"
                   asp-route-ValidateTags="@Model.ValidateTags">
                    @Html.DisplayNameFor(model => model.NModeRecords[0].Lcn)
                </a>
            </th>
            <th>@Html.DisplayNameFor(m=>m.NModeRecords[0].Nmode)</th>
            @if (Model.Calculated)
            {
                <th>@Html.DisplayNameFor(m=>m.NModeRecords[0].DayNormal)</th>
                <th>@Html.DisplayNameFor(m=>m.NModeRecords[0].DayManual)</th>
                <th>@Html.DisplayNameFor(m=>m.NModeRecords[0].DayOther)</th>
                <th>@Html.DisplayNameFor(m=>m.NModeRecords[0].NightNormal)</th>
                <th>@Html.DisplayNameFor(m=>m.NModeRecords[0].NightManual)</th>
                <th>@Html.DisplayNameFor(m=>m.NModeRecords[0].NightOther)</th>
                <th>@Html.DisplayNameFor(m=>m.NModeRecords[0].NormalTotal)</th>
            }
            @if (!Model.HideDetails)
            {
                <th>@Html.DisplayNameFor(m=>m.NModeRecords[0].RecordTime)</th>
                <th>@Html.DisplayNameFor(m=>m.NModeRecords[0].Descriptor)</th>
                <th>@Html.DisplayNameFor(m=>m.NModeRecords[0].CountIt)</th>
                <th>@Html.DisplayNameFor(m=>m.NModeRecords[0].NModeORed)</th>
                <th>@Html.DisplayNameFor(m=>m.NModeRecords[0].ConditionORed)</th>
                <th>@Html.DisplayNameFor(m=>m.NModeRecords[0].Conditions)</th>
            }
            <th>
                Links
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.NModeRecords)
        {
            <tr style="@((item.TagHealthStatus !=FBone.Models.NMode.TagHealthStatus.Good && item.TagHealthStatus != FBone.Models.NMode.TagHealthStatus.Unchecked )? "color:red;":"")">
                <td>@item.Tagname</td>
                <td>@item.Area.Name</td>
                <td>@item.Lcn.Name</td>
                <td>@item.Nmode</td>
                @if (Model.Calculated)
                {
                    <td>@item.DayNormal.ToString("f2")</td>
                    <td>@item.DayManual.ToString("f2")</td>
                    <td>@item.DayOther.ToString("f2")</td>
                    <td>@item.NightNormal.ToString("f2")</td>
                    <td>@item.NightManual.ToString("f2")</td>
                    <td>@item.NightOther.ToString("f2")</td>
                    <td>@item.NormalTotal.ToString("f2")</td>
                }
                @if (!Model.HideDetails)
                {
                    <td>@item.RecordTime</td>
                    <td>@item.Descriptor</td>
                    <td>@item.CountIt</td>
                    <td>@item.NModeORed</td>
                    <td>@item.ConditionORed</td>
                    <td>@item.Conditions.Count</td>
                }
                <td>
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a>
                    @if (DM.IsUserInRole(User, Enums.Roles.IsNModeEditor))
                    {
                        <a asp-action="Edit" asp-route-id="@item.Id">| Edit</a>
                        <a asp-action="Delete" asp-route-id="@item.Id">| Delete</a>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>
<div class="ui-toolbar ui-widget-header ui-helper-clearfix ui-corner-bl ui-corner-br">
    <div class="align-to-right">
        <div class="left-aligned">
            Showing @Model.Page.StartRecord to @Model.Page.EndRecord of @Model.Page.RecordCount
        </div>
        <div class="right-aligned">
            <page-link page-model="Model.Page" page-action="Index" page-area-id="Model.AreaId" page-lcn-id="Model.LcnId"
                       page-size="Model.Page.PageSize" page-calculated=@Model.Calculated page-search=@Model.Search 
                       selected-date=@Model.SelectedDate validate-tags=@Model.ValidateTags result-details=@Model.HideDetails> </page-link>
        </div>
    </div>
</div>
<form method="get" asp-action="Index">
    <input type="hidden" name="AreaId" value=@Model.AreaId />
    <input type="hidden" name="LcnId" value=@Model.LcnId />
    <input type="hidden" name="sortOrder" value=@Model.SortViewModel.Current.ToString() />
    <input type="hidden" name="page" value=@Model.Page.PageNumber />
    <input type="hidden" name="Search" value="@Model.Search" />
    <input type="hidden" name="PageSize" value=@Model.Page.PageSize />

    <div class="left-aligned">
        <scope>
            <input type="date" id="datepicker" asp-for="SelectedDate" name="SelectedDate" />
            <input type="submit" value="Evaluate" class="btn btn-primary" onclick="evaluateClicked()" />
            <input id="CalcChecked" class="form-check-input" asp-for=@Model.Calculated name="Calculated" onchange="this.form.submit()" />
            <label for="Calculated">Evaluated</label>
            <input class="form-check-input" asp-for=@Model.HideDetails name="HideDetails" onchange="this.form.submit()" />
            <label class="labelwide" for="ValidateTags">Hide record details</label>
            <input class="form-check-input" asp-for=@Model.ValidateTags name="ValidateTags" onchange="this.form.submit()" />
            <label for="ValidateTags">Validate tags</label>
        </scope>
    </div>
</form>

<script>

    function evaluateClicked() {
        let chkCalc = document.getElementById("CalcChecked");
        chkCalc.checked = !chkCalc.checked;
    }

    function dateIsValid(date) {
        if (date instanceof Date && !isNaN(date)) {
            if (selectedDate.getFullYear() == 1)
                return false;
            else
                return true;
        }
        else
            return true;

    }
    // Get the input element
    let input = document.getElementById("datepicker");

    // Define the start date (min date) and end date (max date)
    let currentDate = new Date();
    let startDate = currentDate;
    startDate.setDate(currentDate.getDate() - 31);
    let endDate = new Date();
    endDate.setDate(endDate.getDate() - 1);
    let selectedDate = new Date("@Model.SelectedDate.ToString("yyyy-MM-dd")");//newDate();
    // Set start date and end date for the input element
    input.min = startDate.toISOString().slice(0, 10);
    input.max = endDate.toISOString().slice(0, 10);
    if (dateIsValid(selectedDate))
        input.value = selectedDate.toISOString().slice(0, 10);
    else
        input.value = endDate.toISOString().slice(0, 10);

    function onSearchChanged(input, form) {
        if (input.value == "") {
            form.submit();
        }
    }

    function myFunction() {
        window.alert("d");
        var input, filter, table, tr, td, i, txtValue;
        try {
            input = document.getElementById("search");
            console.log(input);
            filter = input.value.toUpperCase();
            table = document.getElementById("nmoderecords");
            trs = table.getElementsByTagName("tr");
            for (i = 0; i < trs.length; i++) {
                td = trs[i].getElementsByTagName("td")[0];
                if (td) {
                    txtValue = td.textContent || td.innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        trs[i].style.backgroundColor = "red";
                    }
                    else {
                        tr[i].style.backgroundColor = "blue";
                    }
                }
            }
        }
        catch (err) {
            console.log(err.message);
        }
    }

</script>
